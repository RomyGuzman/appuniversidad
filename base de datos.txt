-- ==============================================
-- üè´ BASE DE DATOS UNIVERSITARIA COMPLETA
-- Estructura expandida con nombres no abreviados y IDs como 'id'
-- Incluye todas las tablas, relaciones, llaves for√°neas y datos iniciales
-- Compatible con CodeIgniter 4 (usa InnoDB para transacciones y FKs)
-- ==============================================

CREATE DATABASE IF NOT EXISTS app_uni CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE app_uni;

-- ==========================
-- 1Ô∏è‚É£ TABLAS BASE
-- ==========================

CREATE TABLE Carrera (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  nombre_carrera VARCHAR(120) NOT NULL,
  codigo_carrera VARCHAR(20) NOT NULL UNIQUE
) ENGINE=InnoDB;

CREATE TABLE Estudiante (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  dni CHAR(8) NOT NULL UNIQUE,
  nombre_estudiante VARCHAR(80) NOT NULL,
  fecha_nacimiento DATE,
  edad CHAR(2),
  email VARCHAR(50) NOT NULL,
  carrera_id BIGINT UNSIGNED,
  CONSTRAINT fk_estudiante_carrera FOREIGN KEY (carrera_id) REFERENCES Carrera(id)
    ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT chk_dni_valido CHECK (dni REGEXP '^[0-9]{8}$')
) ENGINE=InnoDB;

CREATE TABLE Profesor (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  legajo INT NOT NULL UNIQUE,
  nombre_profesor VARCHAR(80) NOT NULL,
  carrera_id BIGINT UNSIGNED,
  CONSTRAINT fk_profesor_carrera FOREIGN KEY (carrera_id) REFERENCES Carrera(id)
    ON UPDATE CASCADE ON DELETE SET NULL
) ENGINE=InnoDB;

CREATE TABLE Categoria (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  codigo_categoria VARCHAR(20) NOT NULL UNIQUE,
  nombre_categoria VARCHAR(120) NOT NULL,
  carrera_id BIGINT UNSIGNED,
  CONSTRAINT fk_categoria_carrera FOREIGN KEY (carrera_id) REFERENCES Carrera(id)
    ON UPDATE CASCADE ON DELETE SET NULL
) ENGINE=InnoDB;

CREATE TABLE Modalidad (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  codigo_modalidad VARCHAR(20) NOT NULL UNIQUE,
  nombre_modalidad VARCHAR(120) NOT NULL,
  carrera_id BIGINT UNSIGNED,
  CONSTRAINT fk_modalidad_carrera FOREIGN KEY (carrera_id) REFERENCES Carrera(id)
    ON UPDATE CASCADE ON DELETE SET NULL
) ENGINE=InnoDB;

CREATE TABLE Rol (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  nombre_rol VARCHAR(20) NOT NULL UNIQUE
) ENGINE=InnoDB;

CREATE TABLE Usuarios (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  usuario VARCHAR(50) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  rol_id BIGINT UNSIGNED,
  activo BOOLEAN DEFAULT TRUE,
  CONSTRAINT fk_usuario_rol FOREIGN KEY (rol_id) REFERENCES Rol(id)
    ON UPDATE CASCADE ON DELETE SET NULL
) ENGINE=InnoDB;

-- ==========================
-- 2Ô∏è‚É£ TABLAS ACAD√âMICAS
-- ==========================

-- MATERIAS DE CADA CARRERA
CREATE TABLE Materia (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  nombre_materia VARCHAR(120) NOT NULL,
  codigo_materia VARCHAR(20) NOT NULL UNIQUE,
  carrera_id BIGINT UNSIGNED,
  CONSTRAINT fk_materia_carrera FOREIGN KEY (carrera_id) REFERENCES Carrera(id)
    ON UPDATE CASCADE ON DELETE SET NULL
) ENGINE=InnoDB;

-- RELACI√ìN PROFESOR ‚Üî MATERIA
CREATE TABLE Profesor_Materia (
  profesor_id BIGINT UNSIGNED,
  materia_id BIGINT UNSIGNED,
  PRIMARY KEY (profesor_id, materia_id),
  CONSTRAINT fk_profesor_materia_profesor FOREIGN KEY (profesor_id) REFERENCES Profesor(id)
    ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_profesor_materia_materia FOREIGN KEY (materia_id) REFERENCES Materia(id)
    ON UPDATE CASCADE ON DELETE CASCADE
) ENGINE=InnoDB;

-- RELACI√ìN ESTUDIANTE ‚Üî MATERIA
CREATE TABLE Estudiante_Materia (
  estudiante_id BIGINT UNSIGNED,
  materia_id BIGINT UNSIGNED,
  PRIMARY KEY (estudiante_id, materia_id),
  CONSTRAINT fk_estudiante_materia_estudiante FOREIGN KEY (estudiante_id) REFERENCES Estudiante(id)
    ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_estudiante_materia_materia FOREIGN KEY (materia_id) REFERENCES Materia(id)
    ON UPDATE CASCADE ON DELETE CASCADE
) ENGINE=InnoDB;

-- NOTAS DE LOS ESTUDIANTES
CREATE TABLE Nota (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  estudiante_id BIGINT UNSIGNED,
  materia_id BIGINT UNSIGNED,
  calificacion DECIMAL(4,2),
  fecha_evaluacion DATE,
  observaciones VARCHAR(255),
  CONSTRAINT fk_nota_estudiante FOREIGN KEY (estudiante_id) REFERENCES Estudiante(id)
    ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_nota_materia FOREIGN KEY (materia_id) REFERENCES Materia(id)
    ON UPDATE CASCADE ON DELETE CASCADE
) ENGINE=InnoDB;

-- ASISTENCIAS DE LOS ESTUDIANTES
CREATE TABLE Asistencia (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  estudiante_id BIGINT UNSIGNED,
  materia_id BIGINT UNSIGNED,
  fecha DATE NOT NULL,
  estado ENUM('Presente','Ausente','Tarde') NOT NULL,
  observaciones VARCHAR(255),
  CONSTRAINT fk_asistencia_estudiante FOREIGN KEY (estudiante_id) REFERENCES Estudiante(id)
    ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_asistencia_materia FOREIGN KEY (materia_id) REFERENCES Materia(id)
    ON UPDATE CASCADE ON DELETE CASCADE
) ENGINE=InnoDB;

-- MATERIALES DE CLASE
CREATE TABLE Material (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  materia_id BIGINT UNSIGNED,
  titulo VARCHAR(120) NOT NULL,
  descripcion TEXT,
  url_archivo VARCHAR(255),
  fecha_subida DATE,
  CONSTRAINT fk_material_materia FOREIGN KEY (materia_id) REFERENCES Materia(id)
    ON UPDATE CASCADE ON DELETE CASCADE
) ENGINE=InnoDB;

-- ==========================
-- 3Ô∏è‚É£ USUARIOS Y ROLES BASE
-- ==========================

INSERT INTO Rol (nombre_rol) VALUES
('Superadmin'),
('Administrador'),
('Profesor'),
('Estudiante');

-- Ejemplo de usuarios iniciales (contrase√±as hasheadas en producci√≥n; aqu√≠ son placeholders)
INSERT INTO Usuarios (usuario, password, rol_id) VALUES
('superadmin', 'hash_superadmin', 1),
('admin', 'hash_admin', 2),
('profesor_demo', 'hash_profesor', 3),
('alumno_demo', 'hash_alumno', 4);

-- ==========================
-- 4Ô∏è‚É£ RELACIONES L√ìGICAS
-- ==========================
-- Carrera ‚Üí Materia ‚Üí Profesor_Materia ‚Üí Estudiante_Materia ‚Üí Nota / Asistencia / Material
-- Permite dashboards personalizados para:
-- - Profesor: materias, alumnos, notas, asistencias, materiales.
-- - Alumno: notas, asistencias y materiales de sus materias.
-- - Admin: control total de carreras, materias y usuarios.
-- - Superadmin: supervisi√≥n global.

-- ==========================
-- ‚úÖ FIN DE ESTRUCTURA
-- ==========================

-- Notas para CodeIgniter 4:
-- - Usa el Database Forge o Migrations para ejecutar esto en tu app.
-- - Configura la conexi√≥n en app/Config/Database.php con 'app_uni' como database.
-- - Las FKs aseguran integridad referencial; maneja errores en modelos con try-catch.
-- - Para autenticaci√≥n, integra con el sistema de usuarios y roles (ej. usando Guards o custom auth).
-- - Ejemplo de query para dashboard de alumno: SELECT * FROM Nota n JOIN Materia m ON n.materia_id = m.id WHERE n.estudiante_id = ?;

-- EJEMPLOS DE QUERIES √öTILES PARA DASHBOARDS (en CodeIgniter 4)
-- ==========================

-- Dashboard Alumno: Materias inscriptas (solo confirmadas)
SELECT m.nombre_materia, i.fecha_inscripcion, i.estado_inscripcion
FROM Inscripcion i
JOIN Materia m ON i.materia_id = m.id
WHERE i.estudiante_id = 1 AND i.estado_inscripcion = 'Confirmada';

-- Dashboard Profesor: Alumnos inscriptos en una materia (con cupos)
SELECT e.nombre_estudiante, i.fecha_inscripcion, i.estado_inscripcion
FROM Inscripcion i
JOIN Estudiante e ON i.estudiante_id = e.id
WHERE i.materia_id = 1 AND i.estado_inscripcion = 'Confirmada';

-- Reporte Admin: Inscripciones por materia con conteo de cupos
SELECT m.nombre_materia, COUNT(i.id) AS total_inscriptos,
       (SELECT cupo_maximo FROM Materia WHERE id = m.id) AS cupo_maximo  -- Asume agregar cupo_maximo a Materia
FROM Inscripcion i
JOIN Materia m ON i.materia_id = m.id
WHERE i.estado_inscripcion = 'Confirmada'
GROUP BY m.id;

-- Actualizar estado de inscripci√≥n (e.g., desde app)
UPDATE Inscripcion SET estado_inscripcion = 'Aprobada', fecha_aprobacion = CURRENT_DATE
WHERE estudiante_id = 1 AND materia_id = 1;